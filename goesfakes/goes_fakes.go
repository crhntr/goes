// Code generated by MockGen. DO NOT EDIT.
// Source: ../interface.go

// Package goesfakes is a generated GoMock package.
package goesfakes

import (
	goes "github.com/crhntr/goes"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockRuntimer is a mock of Runtimer interface
type MockRuntimer struct {
	ctrl     *gomock.Controller
	recorder *MockRuntimerMockRecorder
}

// MockRuntimerMockRecorder is the mock recorder for MockRuntimer
type MockRuntimerMockRecorder struct {
	mock *MockRuntimer
}

// NewMockRuntimer creates a new mock instance
func NewMockRuntimer(ctrl *gomock.Controller) *MockRuntimer {
	mock := &MockRuntimer{ctrl: ctrl}
	mock.recorder = &MockRuntimerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRuntimer) EXPECT() *MockRuntimerMockRecorder {
	return m.recorder
}

// Global mocks base method
func (m *MockRuntimer) Global() goes.Value {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Global")
	ret0, _ := ret[0].(goes.Value)
	return ret0
}

// Global indicates an expected call of Global
func (mr *MockRuntimerMockRecorder) Global() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Global", reflect.TypeOf((*MockRuntimer)(nil).Global))
}

// Null mocks base method
func (m *MockRuntimer) Null() goes.Value {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Null")
	ret0, _ := ret[0].(goes.Value)
	return ret0
}

// Null indicates an expected call of Null
func (mr *MockRuntimerMockRecorder) Null() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Null", reflect.TypeOf((*MockRuntimer)(nil).Null))
}

// Undefined mocks base method
func (m *MockRuntimer) Undefined() goes.Value {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Undefined")
	ret0, _ := ret[0].(goes.Value)
	return ret0
}

// Undefined indicates an expected call of Undefined
func (mr *MockRuntimerMockRecorder) Undefined() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Undefined", reflect.TypeOf((*MockRuntimer)(nil).Undefined))
}

// ValueOf mocks base method
func (m *MockRuntimer) ValueOf(x interface{}) goes.Value {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValueOf", x)
	ret0, _ := ret[0].(goes.Value)
	return ret0
}

// ValueOf indicates an expected call of ValueOf
func (mr *MockRuntimerMockRecorder) ValueOf(x interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValueOf", reflect.TypeOf((*MockRuntimer)(nil).ValueOf), x)
}

// MockBooler is a mock of Booler interface
type MockBooler struct {
	ctrl     *gomock.Controller
	recorder *MockBoolerMockRecorder
}

// MockBoolerMockRecorder is the mock recorder for MockBooler
type MockBoolerMockRecorder struct {
	mock *MockBooler
}

// NewMockBooler creates a new mock instance
func NewMockBooler(ctrl *gomock.Controller) *MockBooler {
	mock := &MockBooler{ctrl: ctrl}
	mock.recorder = &MockBoolerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBooler) EXPECT() *MockBoolerMockRecorder {
	return m.recorder
}

// Bool mocks base method
func (m *MockBooler) Bool() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Bool")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Bool indicates an expected call of Bool
func (mr *MockBoolerMockRecorder) Bool() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Bool", reflect.TypeOf((*MockBooler)(nil).Bool))
}

// MockCaller is a mock of Caller interface
type MockCaller struct {
	ctrl     *gomock.Controller
	recorder *MockCallerMockRecorder
}

// MockCallerMockRecorder is the mock recorder for MockCaller
type MockCallerMockRecorder struct {
	mock *MockCaller
}

// NewMockCaller creates a new mock instance
func NewMockCaller(ctrl *gomock.Controller) *MockCaller {
	mock := &MockCaller{ctrl: ctrl}
	mock.recorder = &MockCallerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCaller) EXPECT() *MockCallerMockRecorder {
	return m.recorder
}

// Call mocks base method
func (m_2 *MockCaller) Call(m string, args ...interface{}) goes.Value {
	m_2.ctrl.T.Helper()
	varargs := []interface{}{m}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m_2.ctrl.Call(m_2, "Call", varargs...)
	ret0, _ := ret[0].(goes.Value)
	return ret0
}

// Call indicates an expected call of Call
func (mr *MockCallerMockRecorder) Call(m interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{m}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Call", reflect.TypeOf((*MockCaller)(nil).Call), varargs...)
}

// MockFloater is a mock of Floater interface
type MockFloater struct {
	ctrl     *gomock.Controller
	recorder *MockFloaterMockRecorder
}

// MockFloaterMockRecorder is the mock recorder for MockFloater
type MockFloaterMockRecorder struct {
	mock *MockFloater
}

// NewMockFloater creates a new mock instance
func NewMockFloater(ctrl *gomock.Controller) *MockFloater {
	mock := &MockFloater{ctrl: ctrl}
	mock.recorder = &MockFloaterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockFloater) EXPECT() *MockFloaterMockRecorder {
	return m.recorder
}

// Float mocks base method
func (m *MockFloater) Float() float64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Float")
	ret0, _ := ret[0].(float64)
	return ret0
}

// Float indicates an expected call of Float
func (mr *MockFloaterMockRecorder) Float() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Float", reflect.TypeOf((*MockFloater)(nil).Float))
}

// MockGetter is a mock of Getter interface
type MockGetter struct {
	ctrl     *gomock.Controller
	recorder *MockGetterMockRecorder
}

// MockGetterMockRecorder is the mock recorder for MockGetter
type MockGetterMockRecorder struct {
	mock *MockGetter
}

// NewMockGetter creates a new mock instance
func NewMockGetter(ctrl *gomock.Controller) *MockGetter {
	mock := &MockGetter{ctrl: ctrl}
	mock.recorder = &MockGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockGetter) EXPECT() *MockGetterMockRecorder {
	return m.recorder
}

// Get mocks base method
func (m *MockGetter) Get(p string) goes.Value {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", p)
	ret0, _ := ret[0].(goes.Value)
	return ret0
}

// Get indicates an expected call of Get
func (mr *MockGetterMockRecorder) Get(p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockGetter)(nil).Get), p)
}

// MockIndexer is a mock of Indexer interface
type MockIndexer struct {
	ctrl     *gomock.Controller
	recorder *MockIndexerMockRecorder
}

// MockIndexerMockRecorder is the mock recorder for MockIndexer
type MockIndexerMockRecorder struct {
	mock *MockIndexer
}

// NewMockIndexer creates a new mock instance
func NewMockIndexer(ctrl *gomock.Controller) *MockIndexer {
	mock := &MockIndexer{ctrl: ctrl}
	mock.recorder = &MockIndexerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIndexer) EXPECT() *MockIndexerMockRecorder {
	return m.recorder
}

// Index mocks base method
func (m *MockIndexer) Index(i int) goes.Value {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Index", i)
	ret0, _ := ret[0].(goes.Value)
	return ret0
}

// Index indicates an expected call of Index
func (mr *MockIndexerMockRecorder) Index(i interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Index", reflect.TypeOf((*MockIndexer)(nil).Index), i)
}

// MockInstanceOfer is a mock of InstanceOfer interface
type MockInstanceOfer struct {
	ctrl     *gomock.Controller
	recorder *MockInstanceOferMockRecorder
}

// MockInstanceOferMockRecorder is the mock recorder for MockInstanceOfer
type MockInstanceOferMockRecorder struct {
	mock *MockInstanceOfer
}

// NewMockInstanceOfer creates a new mock instance
func NewMockInstanceOfer(ctrl *gomock.Controller) *MockInstanceOfer {
	mock := &MockInstanceOfer{ctrl: ctrl}
	mock.recorder = &MockInstanceOferMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockInstanceOfer) EXPECT() *MockInstanceOferMockRecorder {
	return m.recorder
}

// InstanceOf mocks base method
func (m *MockInstanceOfer) InstanceOf(t goes.Value) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InstanceOf", t)
	ret0, _ := ret[0].(bool)
	return ret0
}

// InstanceOf indicates an expected call of InstanceOf
func (mr *MockInstanceOferMockRecorder) InstanceOf(t interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InstanceOf", reflect.TypeOf((*MockInstanceOfer)(nil).InstanceOf), t)
}

// MockInter is a mock of Inter interface
type MockInter struct {
	ctrl     *gomock.Controller
	recorder *MockInterMockRecorder
}

// MockInterMockRecorder is the mock recorder for MockInter
type MockInterMockRecorder struct {
	mock *MockInter
}

// NewMockInter creates a new mock instance
func NewMockInter(ctrl *gomock.Controller) *MockInter {
	mock := &MockInter{ctrl: ctrl}
	mock.recorder = &MockInterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockInter) EXPECT() *MockInterMockRecorder {
	return m.recorder
}

// Int mocks base method
func (m *MockInter) Int() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Int")
	ret0, _ := ret[0].(int)
	return ret0
}

// Int indicates an expected call of Int
func (mr *MockInterMockRecorder) Int() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Int", reflect.TypeOf((*MockInter)(nil).Int))
}

// MockInvoker is a mock of Invoker interface
type MockInvoker struct {
	ctrl     *gomock.Controller
	recorder *MockInvokerMockRecorder
}

// MockInvokerMockRecorder is the mock recorder for MockInvoker
type MockInvokerMockRecorder struct {
	mock *MockInvoker
}

// NewMockInvoker creates a new mock instance
func NewMockInvoker(ctrl *gomock.Controller) *MockInvoker {
	mock := &MockInvoker{ctrl: ctrl}
	mock.recorder = &MockInvokerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockInvoker) EXPECT() *MockInvokerMockRecorder {
	return m.recorder
}

// Invoke mocks base method
func (m *MockInvoker) Invoke(args ...interface{}) goes.Value {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Invoke", varargs...)
	ret0, _ := ret[0].(goes.Value)
	return ret0
}

// Invoke indicates an expected call of Invoke
func (mr *MockInvokerMockRecorder) Invoke(args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Invoke", reflect.TypeOf((*MockInvoker)(nil).Invoke), args...)
}

// MockLengther is a mock of Lengther interface
type MockLengther struct {
	ctrl     *gomock.Controller
	recorder *MockLengtherMockRecorder
}

// MockLengtherMockRecorder is the mock recorder for MockLengther
type MockLengtherMockRecorder struct {
	mock *MockLengther
}

// NewMockLengther creates a new mock instance
func NewMockLengther(ctrl *gomock.Controller) *MockLengther {
	mock := &MockLengther{ctrl: ctrl}
	mock.recorder = &MockLengtherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLengther) EXPECT() *MockLengtherMockRecorder {
	return m.recorder
}

// Length mocks base method
func (m *MockLengther) Length() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Length")
	ret0, _ := ret[0].(int)
	return ret0
}

// Length indicates an expected call of Length
func (mr *MockLengtherMockRecorder) Length() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Length", reflect.TypeOf((*MockLengther)(nil).Length))
}

// MockNewer is a mock of Newer interface
type MockNewer struct {
	ctrl     *gomock.Controller
	recorder *MockNewerMockRecorder
}

// MockNewerMockRecorder is the mock recorder for MockNewer
type MockNewerMockRecorder struct {
	mock *MockNewer
}

// NewMockNewer creates a new mock instance
func NewMockNewer(ctrl *gomock.Controller) *MockNewer {
	mock := &MockNewer{ctrl: ctrl}
	mock.recorder = &MockNewerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockNewer) EXPECT() *MockNewerMockRecorder {
	return m.recorder
}

// New mocks base method
func (m *MockNewer) New(args ...interface{}) goes.Value {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "New", varargs...)
	ret0, _ := ret[0].(goes.Value)
	return ret0
}

// New indicates an expected call of New
func (mr *MockNewerMockRecorder) New(args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "New", reflect.TypeOf((*MockNewer)(nil).New), args...)
}

// MockSetter is a mock of Setter interface
type MockSetter struct {
	ctrl     *gomock.Controller
	recorder *MockSetterMockRecorder
}

// MockSetterMockRecorder is the mock recorder for MockSetter
type MockSetterMockRecorder struct {
	mock *MockSetter
}

// NewMockSetter creates a new mock instance
func NewMockSetter(ctrl *gomock.Controller) *MockSetter {
	mock := &MockSetter{ctrl: ctrl}
	mock.recorder = &MockSetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSetter) EXPECT() *MockSetterMockRecorder {
	return m.recorder
}

// Set mocks base method
func (m *MockSetter) Set(p string, x interface{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Set", p, x)
}

// Set indicates an expected call of Set
func (mr *MockSetterMockRecorder) Set(p, x interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockSetter)(nil).Set), p, x)
}

// MockSetIndexer is a mock of SetIndexer interface
type MockSetIndexer struct {
	ctrl     *gomock.Controller
	recorder *MockSetIndexerMockRecorder
}

// MockSetIndexerMockRecorder is the mock recorder for MockSetIndexer
type MockSetIndexerMockRecorder struct {
	mock *MockSetIndexer
}

// NewMockSetIndexer creates a new mock instance
func NewMockSetIndexer(ctrl *gomock.Controller) *MockSetIndexer {
	mock := &MockSetIndexer{ctrl: ctrl}
	mock.recorder = &MockSetIndexerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSetIndexer) EXPECT() *MockSetIndexerMockRecorder {
	return m.recorder
}

// SetIndex mocks base method
func (m *MockSetIndexer) SetIndex(i int, x interface{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetIndex", i, x)
}

// SetIndex indicates an expected call of SetIndex
func (mr *MockSetIndexerMockRecorder) SetIndex(i, x interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetIndex", reflect.TypeOf((*MockSetIndexer)(nil).SetIndex), i, x)
}

// MockStringer is a mock of Stringer interface
type MockStringer struct {
	ctrl     *gomock.Controller
	recorder *MockStringerMockRecorder
}

// MockStringerMockRecorder is the mock recorder for MockStringer
type MockStringerMockRecorder struct {
	mock *MockStringer
}

// NewMockStringer creates a new mock instance
func NewMockStringer(ctrl *gomock.Controller) *MockStringer {
	mock := &MockStringer{ctrl: ctrl}
	mock.recorder = &MockStringerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStringer) EXPECT() *MockStringerMockRecorder {
	return m.recorder
}

// String mocks base method
func (m *MockStringer) String() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "String")
	ret0, _ := ret[0].(string)
	return ret0
}

// String indicates an expected call of String
func (mr *MockStringerMockRecorder) String() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*MockStringer)(nil).String))
}

// MockTruther is a mock of Truther interface
type MockTruther struct {
	ctrl     *gomock.Controller
	recorder *MockTrutherMockRecorder
}

// MockTrutherMockRecorder is the mock recorder for MockTruther
type MockTrutherMockRecorder struct {
	mock *MockTruther
}

// NewMockTruther creates a new mock instance
func NewMockTruther(ctrl *gomock.Controller) *MockTruther {
	mock := &MockTruther{ctrl: ctrl}
	mock.recorder = &MockTrutherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTruther) EXPECT() *MockTrutherMockRecorder {
	return m.recorder
}

// Truthy mocks base method
func (m *MockTruther) Truthy() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Truthy")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Truthy indicates an expected call of Truthy
func (mr *MockTrutherMockRecorder) Truthy() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Truthy", reflect.TypeOf((*MockTruther)(nil).Truthy))
}

// Typer is a mock of Typer interface
type Typer struct {
	ctrl     *gomock.Controller
	recorder *TyperMockRecorder
}

// TyperMockRecorder is the mock recorder for Typer
type TyperMockRecorder struct {
	mock *Typer
}

// NewTyper creates a new mock instance
func NewTyper(ctrl *gomock.Controller) *Typer {
	mock := &Typer{ctrl: ctrl}
	mock.recorder = &TyperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *Typer) EXPECT() *TyperMockRecorder {
	return m.recorder
}

// Type mocks base method
func (m *Typer) Type() goes.Type {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Type")
	ret0, _ := ret[0].(goes.Type)
	return ret0
}

// Type indicates an expected call of Type
func (mr *TyperMockRecorder) Type() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Type", reflect.TypeOf((*Typer)(nil).Type))
}

// Value is a mock of Value interface
type Value struct {
	ctrl     *gomock.Controller
	recorder *ValueMockRecorder
}

// ValueMockRecorder is the mock recorder for Value
type ValueMockRecorder struct {
	mock *Value
}

// NewValue creates a new mock instance
func NewValue(ctrl *gomock.Controller) *Value {
	mock := &Value{ctrl: ctrl}
	mock.recorder = &ValueMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *Value) EXPECT() *ValueMockRecorder {
	return m.recorder
}

// Bool mocks base method
func (m *Value) Bool() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Bool")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Bool indicates an expected call of Bool
func (mr *ValueMockRecorder) Bool() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Bool", reflect.TypeOf((*Value)(nil).Bool))
}

// Call mocks base method
func (m_2 *Value) Call(m string, args ...interface{}) goes.Value {
	m_2.ctrl.T.Helper()
	varargs := []interface{}{m}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m_2.ctrl.Call(m_2, "Call", varargs...)
	ret0, _ := ret[0].(goes.Value)
	return ret0
}

// Call indicates an expected call of Call
func (mr *ValueMockRecorder) Call(m interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{m}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Call", reflect.TypeOf((*Value)(nil).Call), varargs...)
}

// Float mocks base method
func (m *Value) Float() float64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Float")
	ret0, _ := ret[0].(float64)
	return ret0
}

// Float indicates an expected call of Float
func (mr *ValueMockRecorder) Float() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Float", reflect.TypeOf((*Value)(nil).Float))
}

// Get mocks base method
func (m *Value) Get(p string) goes.Value {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", p)
	ret0, _ := ret[0].(goes.Value)
	return ret0
}

// Get indicates an expected call of Get
func (mr *ValueMockRecorder) Get(p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*Value)(nil).Get), p)
}

// Index mocks base method
func (m *Value) Index(i int) goes.Value {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Index", i)
	ret0, _ := ret[0].(goes.Value)
	return ret0
}

// Index indicates an expected call of Index
func (mr *ValueMockRecorder) Index(i interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Index", reflect.TypeOf((*Value)(nil).Index), i)
}

// InstanceOf mocks base method
func (m *Value) InstanceOf(t goes.Value) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InstanceOf", t)
	ret0, _ := ret[0].(bool)
	return ret0
}

// InstanceOf indicates an expected call of InstanceOf
func (mr *ValueMockRecorder) InstanceOf(t interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InstanceOf", reflect.TypeOf((*Value)(nil).InstanceOf), t)
}

// Int mocks base method
func (m *Value) Int() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Int")
	ret0, _ := ret[0].(int)
	return ret0
}

// Int indicates an expected call of Int
func (mr *ValueMockRecorder) Int() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Int", reflect.TypeOf((*Value)(nil).Int))
}

// Invoke mocks base method
func (m *Value) Invoke(args ...interface{}) goes.Value {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Invoke", varargs...)
	ret0, _ := ret[0].(goes.Value)
	return ret0
}

// Invoke indicates an expected call of Invoke
func (mr *ValueMockRecorder) Invoke(args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Invoke", reflect.TypeOf((*Value)(nil).Invoke), args...)
}

// Length mocks base method
func (m *Value) Length() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Length")
	ret0, _ := ret[0].(int)
	return ret0
}

// Length indicates an expected call of Length
func (mr *ValueMockRecorder) Length() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Length", reflect.TypeOf((*Value)(nil).Length))
}

// New mocks base method
func (m *Value) New(args ...interface{}) goes.Value {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "New", varargs...)
	ret0, _ := ret[0].(goes.Value)
	return ret0
}

// New indicates an expected call of New
func (mr *ValueMockRecorder) New(args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "New", reflect.TypeOf((*Value)(nil).New), args...)
}

// Set mocks base method
func (m *Value) Set(p string, x interface{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Set", p, x)
}

// Set indicates an expected call of Set
func (mr *ValueMockRecorder) Set(p, x interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*Value)(nil).Set), p, x)
}

// SetIndex mocks base method
func (m *Value) SetIndex(i int, x interface{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetIndex", i, x)
}

// SetIndex indicates an expected call of SetIndex
func (mr *ValueMockRecorder) SetIndex(i, x interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetIndex", reflect.TypeOf((*Value)(nil).SetIndex), i, x)
}

// String mocks base method
func (m *Value) String() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "String")
	ret0, _ := ret[0].(string)
	return ret0
}

// String indicates an expected call of String
func (mr *ValueMockRecorder) String() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*Value)(nil).String))
}

// Truthy mocks base method
func (m *Value) Truthy() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Truthy")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Truthy indicates an expected call of Truthy
func (mr *ValueMockRecorder) Truthy() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Truthy", reflect.TypeOf((*Value)(nil).Truthy))
}

// Type mocks base method
func (m *Value) Type() goes.Type {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Type")
	ret0, _ := ret[0].(goes.Type)
	return ret0
}

// Type indicates an expected call of Type
func (mr *ValueMockRecorder) Type() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Type", reflect.TypeOf((*Value)(nil).Type))
}

// Func is a mock of Func interface
type Func struct {
	ctrl     *gomock.Controller
	recorder *FuncMockRecorder
}

// FuncMockRecorder is the mock recorder for Func
type FuncMockRecorder struct {
	mock *Func
}

// NewFunc creates a new mock instance
func NewFunc(ctrl *gomock.Controller) *Func {
	mock := &Func{ctrl: ctrl}
	mock.recorder = &FuncMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *Func) EXPECT() *FuncMockRecorder {
	return m.recorder
}

// Release mocks base method
func (m *Func) Release() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Release")
}

// Release indicates an expected call of Release
func (mr *FuncMockRecorder) Release() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Release", reflect.TypeOf((*Func)(nil).Release))
}

// Releaser is a mock of Releaser interface
type Releaser struct {
	ctrl     *gomock.Controller
	recorder *ReleaserMockRecorder
}

// ReleaserMockRecorder is the mock recorder for Releaser
type ReleaserMockRecorder struct {
	mock *Releaser
}

// NewReleaser creates a new mock instance
func NewReleaser(ctrl *gomock.Controller) *Releaser {
	mock := &Releaser{ctrl: ctrl}
	mock.recorder = &ReleaserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *Releaser) EXPECT() *ReleaserMockRecorder {
	return m.recorder
}

// Release mocks base method
func (m *Releaser) Release() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Release")
}

// Release indicates an expected call of Release
func (mr *ReleaserMockRecorder) Release() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Release", reflect.TypeOf((*Releaser)(nil).Release))
}

// TypedArray is a mock of TypedArray interface
type TypedArray struct {
	ctrl     *gomock.Controller
	recorder *TypedArrayMockRecorder
}

// TypedArrayMockRecorder is the mock recorder for TypedArray
type TypedArrayMockRecorder struct {
	mock *TypedArray
}

// NewTypedArray creates a new mock instance
func NewTypedArray(ctrl *gomock.Controller) *TypedArray {
	mock := &TypedArray{ctrl: ctrl}
	mock.recorder = &TypedArrayMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *TypedArray) EXPECT() *TypedArrayMockRecorder {
	return m.recorder
}

// Release mocks base method
func (m *TypedArray) Release() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Release")
}

// Release indicates an expected call of Release
func (mr *TypedArrayMockRecorder) Release() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Release", reflect.TypeOf((*TypedArray)(nil).Release))
}

// Code generated by MockGen. DO NOT EDIT.
// Source: ../interface.go

// Package goesfakes is a generated GoMock package.
package goesfakes

import (
	goes "github.com/crhntr/goes"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// Runtime is a mock of Runtimer interface
type Runtime struct {
	ctrl     *gomock.Controller
	recorder *RuntimeMockRecorder
}

// RuntimeMockRecorder is the mock recorder for Runtime
type RuntimeMockRecorder struct {
	mock *Runtime
}

// NewRuntime creates a new mock instance
func NewRuntime(ctrl *gomock.Controller) *Runtime {
	mock := &Runtime{ctrl: ctrl}
	mock.recorder = &RuntimeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *Runtime) EXPECT() *RuntimeMockRecorder {
	return m.recorder
}

// Global mocks base method
func (m *Runtime) Global() goes.Value {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Global")
	ret0, _ := ret[0].(goes.Value)
	return ret0
}

// Global indicates an expected call of Global
func (mr *RuntimeMockRecorder) Global() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Global", reflect.TypeOf((*Runtime)(nil).Global))
}

// Null mocks base method
func (m *Runtime) Null() goes.Value {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Null")
	ret0, _ := ret[0].(goes.Value)
	return ret0
}

// Null indicates an expected call of Null
func (mr *RuntimeMockRecorder) Null() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Null", reflect.TypeOf((*Runtime)(nil).Null))
}

// Undefined mocks base method
func (m *Runtime) Undefined() goes.Value {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Undefined")
	ret0, _ := ret[0].(goes.Value)
	return ret0
}

// Undefined indicates an expected call of Undefined
func (mr *RuntimeMockRecorder) Undefined() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Undefined", reflect.TypeOf((*Runtime)(nil).Undefined))
}

// ValueOf mocks base method
func (m *Runtime) ValueOf(x interface{}) goes.Value {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValueOf", x)
	ret0, _ := ret[0].(goes.Value)
	return ret0
}

// ValueOf indicates an expected call of ValueOf
func (mr *RuntimeMockRecorder) ValueOf(x interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValueOf", reflect.TypeOf((*Runtime)(nil).ValueOf), x)
}

// Booler is a mock of Booler interface
type Booler struct {
	ctrl     *gomock.Controller
	recorder *BoolerMockRecorder
}

// BoolerMockRecorder is the mock recorder for Booler
type BoolerMockRecorder struct {
	mock *Booler
}

// NewBooler creates a new mock instance
func NewBooler(ctrl *gomock.Controller) *Booler {
	mock := &Booler{ctrl: ctrl}
	mock.recorder = &BoolerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *Booler) EXPECT() *BoolerMockRecorder {
	return m.recorder
}

// Bool mocks base method
func (m *Booler) Bool() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Bool")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Bool indicates an expected call of Bool
func (mr *BoolerMockRecorder) Bool() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Bool", reflect.TypeOf((*Booler)(nil).Bool))
}

// Caller is a mock of Caller interface
type Caller struct {
	ctrl     *gomock.Controller
	recorder *CallerMockRecorder
}

// CallerMockRecorder is the mock recorder for Caller
type CallerMockRecorder struct {
	mock *Caller
}

// NewCaller creates a new mock instance
func NewCaller(ctrl *gomock.Controller) *Caller {
	mock := &Caller{ctrl: ctrl}
	mock.recorder = &CallerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *Caller) EXPECT() *CallerMockRecorder {
	return m.recorder
}

// Call mocks base method
func (m_2 *Caller) Call(m string, args ...interface{}) goes.Value {
	m_2.ctrl.T.Helper()
	varargs := []interface{}{m}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m_2.ctrl.Call(m_2, "Call", varargs...)
	ret0, _ := ret[0].(goes.Value)
	return ret0
}

// Call indicates an expected call of Call
func (mr *CallerMockRecorder) Call(m interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{m}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Call", reflect.TypeOf((*Caller)(nil).Call), varargs...)
}

// Floater is a mock of Floater interface
type Floater struct {
	ctrl     *gomock.Controller
	recorder *FloaterMockRecorder
}

// FloaterMockRecorder is the mock recorder for Floater
type FloaterMockRecorder struct {
	mock *Floater
}

// NewFloater creates a new mock instance
func NewFloater(ctrl *gomock.Controller) *Floater {
	mock := &Floater{ctrl: ctrl}
	mock.recorder = &FloaterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *Floater) EXPECT() *FloaterMockRecorder {
	return m.recorder
}

// Float mocks base method
func (m *Floater) Float() float64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Float")
	ret0, _ := ret[0].(float64)
	return ret0
}

// Float indicates an expected call of Float
func (mr *FloaterMockRecorder) Float() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Float", reflect.TypeOf((*Floater)(nil).Float))
}

// Getter is a mock of Getter interface
type Getter struct {
	ctrl     *gomock.Controller
	recorder *GetterMockRecorder
}

// GetterMockRecorder is the mock recorder for Getter
type GetterMockRecorder struct {
	mock *Getter
}

// NewGetter creates a new mock instance
func NewGetter(ctrl *gomock.Controller) *Getter {
	mock := &Getter{ctrl: ctrl}
	mock.recorder = &GetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *Getter) EXPECT() *GetterMockRecorder {
	return m.recorder
}

// Get mocks base method
func (m *Getter) Get(p string) goes.Value {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", p)
	ret0, _ := ret[0].(goes.Value)
	return ret0
}

// Get indicates an expected call of Get
func (mr *GetterMockRecorder) Get(p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*Getter)(nil).Get), p)
}

// Indexer is a mock of Indexer interface
type Indexer struct {
	ctrl     *gomock.Controller
	recorder *IndexerMockRecorder
}

// IndexerMockRecorder is the mock recorder for Indexer
type IndexerMockRecorder struct {
	mock *Indexer
}

// NewIndexer creates a new mock instance
func NewIndexer(ctrl *gomock.Controller) *Indexer {
	mock := &Indexer{ctrl: ctrl}
	mock.recorder = &IndexerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *Indexer) EXPECT() *IndexerMockRecorder {
	return m.recorder
}

// Index mocks base method
func (m *Indexer) Index(i int) goes.Value {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Index", i)
	ret0, _ := ret[0].(goes.Value)
	return ret0
}

// Index indicates an expected call of Index
func (mr *IndexerMockRecorder) Index(i interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Index", reflect.TypeOf((*Indexer)(nil).Index), i)
}

// InstanceOfer is a mock of InstanceOfer interface
type InstanceOfer struct {
	ctrl     *gomock.Controller
	recorder *InstanceOferMockRecorder
}

// InstanceOferMockRecorder is the mock recorder for InstanceOfer
type InstanceOferMockRecorder struct {
	mock *InstanceOfer
}

// NewInstanceOfer creates a new mock instance
func NewInstanceOfer(ctrl *gomock.Controller) *InstanceOfer {
	mock := &InstanceOfer{ctrl: ctrl}
	mock.recorder = &InstanceOferMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *InstanceOfer) EXPECT() *InstanceOferMockRecorder {
	return m.recorder
}

// InstanceOf mocks base method
func (m *InstanceOfer) InstanceOf(t goes.Value) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InstanceOf", t)
	ret0, _ := ret[0].(bool)
	return ret0
}

// InstanceOf indicates an expected call of InstanceOf
func (mr *InstanceOferMockRecorder) InstanceOf(t interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InstanceOf", reflect.TypeOf((*InstanceOfer)(nil).InstanceOf), t)
}

// Inter is a mock of Inter interface
type Inter struct {
	ctrl     *gomock.Controller
	recorder *InterMockRecorder
}

// InterMockRecorder is the mock recorder for Inter
type InterMockRecorder struct {
	mock *Inter
}

// NewInter creates a new mock instance
func NewInter(ctrl *gomock.Controller) *Inter {
	mock := &Inter{ctrl: ctrl}
	mock.recorder = &InterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *Inter) EXPECT() *InterMockRecorder {
	return m.recorder
}

// Int mocks base method
func (m *Inter) Int() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Int")
	ret0, _ := ret[0].(int)
	return ret0
}

// Int indicates an expected call of Int
func (mr *InterMockRecorder) Int() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Int", reflect.TypeOf((*Inter)(nil).Int))
}

// Invoker is a mock of Invoker interface
type Invoker struct {
	ctrl     *gomock.Controller
	recorder *InvokerMockRecorder
}

// InvokerMockRecorder is the mock recorder for Invoker
type InvokerMockRecorder struct {
	mock *Invoker
}

// NewInvoker creates a new mock instance
func NewInvoker(ctrl *gomock.Controller) *Invoker {
	mock := &Invoker{ctrl: ctrl}
	mock.recorder = &InvokerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *Invoker) EXPECT() *InvokerMockRecorder {
	return m.recorder
}

// Invoke mocks base method
func (m *Invoker) Invoke(args ...interface{}) goes.Value {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Invoke", varargs...)
	ret0, _ := ret[0].(goes.Value)
	return ret0
}

// Invoke indicates an expected call of Invoke
func (mr *InvokerMockRecorder) Invoke(args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Invoke", reflect.TypeOf((*Invoker)(nil).Invoke), args...)
}

// Lengther is a mock of Lengther interface
type Lengther struct {
	ctrl     *gomock.Controller
	recorder *LengtherMockRecorder
}

// LengtherMockRecorder is the mock recorder for Lengther
type LengtherMockRecorder struct {
	mock *Lengther
}

// NewLengther creates a new mock instance
func NewLengther(ctrl *gomock.Controller) *Lengther {
	mock := &Lengther{ctrl: ctrl}
	mock.recorder = &LengtherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *Lengther) EXPECT() *LengtherMockRecorder {
	return m.recorder
}

// Length mocks base method
func (m *Lengther) Length() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Length")
	ret0, _ := ret[0].(int)
	return ret0
}

// Length indicates an expected call of Length
func (mr *LengtherMockRecorder) Length() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Length", reflect.TypeOf((*Lengther)(nil).Length))
}

// Newer is a mock of Newer interface
type Newer struct {
	ctrl     *gomock.Controller
	recorder *NewerMockRecorder
}

// NewerMockRecorder is the mock recorder for Newer
type NewerMockRecorder struct {
	mock *Newer
}

// NewNewer creates a new mock instance
func NewNewer(ctrl *gomock.Controller) *Newer {
	mock := &Newer{ctrl: ctrl}
	mock.recorder = &NewerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *Newer) EXPECT() *NewerMockRecorder {
	return m.recorder
}

// New mocks base method
func (m *Newer) New(args ...interface{}) goes.Value {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "New", varargs...)
	ret0, _ := ret[0].(goes.Value)
	return ret0
}

// New indicates an expected call of New
func (mr *NewerMockRecorder) New(args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "New", reflect.TypeOf((*Newer)(nil).New), args...)
}

// Setter is a mock of Setter interface
type Setter struct {
	ctrl     *gomock.Controller
	recorder *SetterMockRecorder
}

// SetterMockRecorder is the mock recorder for Setter
type SetterMockRecorder struct {
	mock *Setter
}

// NewSetter creates a new mock instance
func NewSetter(ctrl *gomock.Controller) *Setter {
	mock := &Setter{ctrl: ctrl}
	mock.recorder = &SetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *Setter) EXPECT() *SetterMockRecorder {
	return m.recorder
}

// Set mocks base method
func (m *Setter) Set(p string, x interface{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Set", p, x)
}

// Set indicates an expected call of Set
func (mr *SetterMockRecorder) Set(p, x interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*Setter)(nil).Set), p, x)
}

// SetIndexer is a mock of SetIndexer interface
type SetIndexer struct {
	ctrl     *gomock.Controller
	recorder *SetIndexerMockRecorder
}

// SetIndexerMockRecorder is the mock recorder for SetIndexer
type SetIndexerMockRecorder struct {
	mock *SetIndexer
}

// NewSetIndexer creates a new mock instance
func NewSetIndexer(ctrl *gomock.Controller) *SetIndexer {
	mock := &SetIndexer{ctrl: ctrl}
	mock.recorder = &SetIndexerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *SetIndexer) EXPECT() *SetIndexerMockRecorder {
	return m.recorder
}

// SetIndex mocks base method
func (m *SetIndexer) SetIndex(i int, x interface{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetIndex", i, x)
}

// SetIndex indicates an expected call of SetIndex
func (mr *SetIndexerMockRecorder) SetIndex(i, x interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetIndex", reflect.TypeOf((*SetIndexer)(nil).SetIndex), i, x)
}

// Stringer is a mock of Stringer interface
type Stringer struct {
	ctrl     *gomock.Controller
	recorder *StringerMockRecorder
}

// StringerMockRecorder is the mock recorder for Stringer
type StringerMockRecorder struct {
	mock *Stringer
}

// NewStringer creates a new mock instance
func NewStringer(ctrl *gomock.Controller) *Stringer {
	mock := &Stringer{ctrl: ctrl}
	mock.recorder = &StringerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *Stringer) EXPECT() *StringerMockRecorder {
	return m.recorder
}

// String mocks base method
func (m *Stringer) String() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "String")
	ret0, _ := ret[0].(string)
	return ret0
}

// String indicates an expected call of String
func (mr *StringerMockRecorder) String() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*Stringer)(nil).String))
}

// Truther is a mock of Truther interface
type Truther struct {
	ctrl     *gomock.Controller
	recorder *TrutherMockRecorder
}

// TrutherMockRecorder is the mock recorder for Truther
type TrutherMockRecorder struct {
	mock *Truther
}

// NewTruther creates a new mock instance
func NewTruther(ctrl *gomock.Controller) *Truther {
	mock := &Truther{ctrl: ctrl}
	mock.recorder = &TrutherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *Truther) EXPECT() *TrutherMockRecorder {
	return m.recorder
}

// Truthy mocks base method
func (m *Truther) Truthy() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Truthy")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Truthy indicates an expected call of Truthy
func (mr *TrutherMockRecorder) Truthy() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Truthy", reflect.TypeOf((*Truther)(nil).Truthy))
}

// Typer is a mock of Typer interface
type Typer struct {
	ctrl     *gomock.Controller
	recorder *TyperMockRecorder
}

// TyperMockRecorder is the mock recorder for Typer
type TyperMockRecorder struct {
	mock *Typer
}

// NewTyper creates a new mock instance
func NewTyper(ctrl *gomock.Controller) *Typer {
	mock := &Typer{ctrl: ctrl}
	mock.recorder = &TyperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *Typer) EXPECT() *TyperMockRecorder {
	return m.recorder
}

// Type mocks base method
func (m *Typer) Type() goes.Type {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Type")
	ret0, _ := ret[0].(goes.Type)
	return ret0
}

// Type indicates an expected call of Type
func (mr *TyperMockRecorder) Type() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Type", reflect.TypeOf((*Typer)(nil).Type))
}

// Value is a mock of Value interface
type Value struct {
	ctrl     *gomock.Controller
	recorder *ValueMockRecorder
}

// ValueMockRecorder is the mock recorder for Value
type ValueMockRecorder struct {
	mock *Value
}

// NewValue creates a new mock instance
func NewValue(ctrl *gomock.Controller) *Value {
	mock := &Value{ctrl: ctrl}
	mock.recorder = &ValueMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *Value) EXPECT() *ValueMockRecorder {
	return m.recorder
}

// Bool mocks base method
func (m *Value) Bool() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Bool")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Bool indicates an expected call of Bool
func (mr *ValueMockRecorder) Bool() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Bool", reflect.TypeOf((*Value)(nil).Bool))
}

// Call mocks base method
func (m_2 *Value) Call(m string, args ...interface{}) goes.Value {
	m_2.ctrl.T.Helper()
	varargs := []interface{}{m}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m_2.ctrl.Call(m_2, "Call", varargs...)
	ret0, _ := ret[0].(goes.Value)
	return ret0
}

// Call indicates an expected call of Call
func (mr *ValueMockRecorder) Call(m interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{m}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Call", reflect.TypeOf((*Value)(nil).Call), varargs...)
}

// Float mocks base method
func (m *Value) Float() float64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Float")
	ret0, _ := ret[0].(float64)
	return ret0
}

// Float indicates an expected call of Float
func (mr *ValueMockRecorder) Float() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Float", reflect.TypeOf((*Value)(nil).Float))
}

// Get mocks base method
func (m *Value) Get(p string) goes.Value {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", p)
	ret0, _ := ret[0].(goes.Value)
	return ret0
}

// Get indicates an expected call of Get
func (mr *ValueMockRecorder) Get(p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*Value)(nil).Get), p)
}

// Index mocks base method
func (m *Value) Index(i int) goes.Value {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Index", i)
	ret0, _ := ret[0].(goes.Value)
	return ret0
}

// Index indicates an expected call of Index
func (mr *ValueMockRecorder) Index(i interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Index", reflect.TypeOf((*Value)(nil).Index), i)
}

// InstanceOf mocks base method
func (m *Value) InstanceOf(t goes.Value) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InstanceOf", t)
	ret0, _ := ret[0].(bool)
	return ret0
}

// InstanceOf indicates an expected call of InstanceOf
func (mr *ValueMockRecorder) InstanceOf(t interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InstanceOf", reflect.TypeOf((*Value)(nil).InstanceOf), t)
}

// Int mocks base method
func (m *Value) Int() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Int")
	ret0, _ := ret[0].(int)
	return ret0
}

// Int indicates an expected call of Int
func (mr *ValueMockRecorder) Int() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Int", reflect.TypeOf((*Value)(nil).Int))
}

// Invoke mocks base method
func (m *Value) Invoke(args ...interface{}) goes.Value {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Invoke", varargs...)
	ret0, _ := ret[0].(goes.Value)
	return ret0
}

// Invoke indicates an expected call of Invoke
func (mr *ValueMockRecorder) Invoke(args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Invoke", reflect.TypeOf((*Value)(nil).Invoke), args...)
}

// Length mocks base method
func (m *Value) Length() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Length")
	ret0, _ := ret[0].(int)
	return ret0
}

// Length indicates an expected call of Length
func (mr *ValueMockRecorder) Length() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Length", reflect.TypeOf((*Value)(nil).Length))
}

// New mocks base method
func (m *Value) New(args ...interface{}) goes.Value {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "New", varargs...)
	ret0, _ := ret[0].(goes.Value)
	return ret0
}

// New indicates an expected call of New
func (mr *ValueMockRecorder) New(args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "New", reflect.TypeOf((*Value)(nil).New), args...)
}

// Set mocks base method
func (m *Value) Set(p string, x interface{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Set", p, x)
}

// Set indicates an expected call of Set
func (mr *ValueMockRecorder) Set(p, x interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*Value)(nil).Set), p, x)
}

// SetIndex mocks base method
func (m *Value) SetIndex(i int, x interface{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetIndex", i, x)
}

// SetIndex indicates an expected call of SetIndex
func (mr *ValueMockRecorder) SetIndex(i, x interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetIndex", reflect.TypeOf((*Value)(nil).SetIndex), i, x)
}

// String mocks base method
func (m *Value) String() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "String")
	ret0, _ := ret[0].(string)
	return ret0
}

// String indicates an expected call of String
func (mr *ValueMockRecorder) String() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*Value)(nil).String))
}

// Truthy mocks base method
func (m *Value) Truthy() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Truthy")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Truthy indicates an expected call of Truthy
func (mr *ValueMockRecorder) Truthy() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Truthy", reflect.TypeOf((*Value)(nil).Truthy))
}

// Type mocks base method
func (m *Value) Type() goes.Type {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Type")
	ret0, _ := ret[0].(goes.Type)
	return ret0
}

// Type indicates an expected call of Type
func (mr *ValueMockRecorder) Type() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Type", reflect.TypeOf((*Value)(nil).Type))
}

// Func is a mock of Func interface
type Func struct {
	ctrl     *gomock.Controller
	recorder *FuncMockRecorder
}

// FuncMockRecorder is the mock recorder for Func
type FuncMockRecorder struct {
	mock *Func
}

// NewFunc creates a new mock instance
func NewFunc(ctrl *gomock.Controller) *Func {
	mock := &Func{ctrl: ctrl}
	mock.recorder = &FuncMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *Func) EXPECT() *FuncMockRecorder {
	return m.recorder
}

// Release mocks base method
func (m *Func) Release() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Release")
}

// Release indicates an expected call of Release
func (mr *FuncMockRecorder) Release() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Release", reflect.TypeOf((*Func)(nil).Release))
}

// Releaser is a mock of Releaser interface
type Releaser struct {
	ctrl     *gomock.Controller
	recorder *ReleaserMockRecorder
}

// ReleaserMockRecorder is the mock recorder for Releaser
type ReleaserMockRecorder struct {
	mock *Releaser
}

// NewReleaser creates a new mock instance
func NewReleaser(ctrl *gomock.Controller) *Releaser {
	mock := &Releaser{ctrl: ctrl}
	mock.recorder = &ReleaserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *Releaser) EXPECT() *ReleaserMockRecorder {
	return m.recorder
}

// Release mocks base method
func (m *Releaser) Release() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Release")
}

// Release indicates an expected call of Release
func (mr *ReleaserMockRecorder) Release() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Release", reflect.TypeOf((*Releaser)(nil).Release))
}

// TypedArray is a mock of TypedArray interface
type TypedArray struct {
	ctrl     *gomock.Controller
	recorder *TypedArrayMockRecorder
}

// TypedArrayMockRecorder is the mock recorder for TypedArray
type TypedArrayMockRecorder struct {
	mock *TypedArray
}

// NewTypedArray creates a new mock instance
func NewTypedArray(ctrl *gomock.Controller) *TypedArray {
	mock := &TypedArray{ctrl: ctrl}
	mock.recorder = &TypedArrayMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *TypedArray) EXPECT() *TypedArrayMockRecorder {
	return m.recorder
}

// Release mocks base method
func (m *TypedArray) Release() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Release")
}

// Release indicates an expected call of Release
func (mr *TypedArrayMockRecorder) Release() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Release", reflect.TypeOf((*TypedArray)(nil).Release))
}

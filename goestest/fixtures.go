package goestest

import (
	"encoding/base64"
	"fmt"
)

const (
	MinimalIndexPageExecutableWASMPath = "/main.wasm"
	MinimalIndexPageGoWASMExecPath     = "/wasm_exec.js"
)

func MinimalIndexPage() []byte {
	return []byte(fmt.Sprintf(`<!DOCTYPE html>
  <html lang="en" dir="ltr">
    <head>
      <meta charset="utf-8">
      <title>main.go</title>
      <script src=%q></script>
      <script>
  			const go = new Go();
  			WebAssembly.instantiateStreaming(fetch(%q), go.importObject).then((result) => {
  				go.run(result.instance);
  			});
  		</script>
    </head>
    <body>
      <div id="main"></div>
    </body>
  </html>
  `, MinimalIndexPageGoWASMExecPath, MinimalIndexPageExecutableWASMPath))
}

func GoWASMExec() []byte {
	decoded, _ := base64.StdEncoding.DecodeString(``)

	return decoded
}

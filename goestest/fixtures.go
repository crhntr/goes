package goestest

import (
	"encoding/base64"
	"fmt"
)

const (
	// MinimalIndexPageExecutableWASMPath should be used to route to the Handler
	// writing the bytes from MinimalIndexPage.
	MinimalIndexPageExecutableWASMPath = "/main.wasm"

	// MinimalIndexPageGoWASMExecPath should be used to route to the Handler
	// writing the bytes from GoWASMExec.
	MinimalIndexPageGoWASMExecPath = "/wasm_exec.js"
)

// MinimalIndexPage returns the bytes for an index.html that can be used in
// tests of main programs compiled to js/wasm.
func MinimalIndexPage() []byte {
	return []byte(fmt.Sprintf(`<!DOCTYPE html>
  <html lang="en" dir="ltr">
    <head>
      <meta charset="utf-8">
      <title>main.go</title>
      <script src=%q></script>
      <script>
				if (!WebAssembly.instantiateStreaming) { // polyfill
					WebAssembly.instantiateStreaming = async (resp, importObject) => {
						const source = await (await resp).arrayBuffer();
						return await WebAssembly.instantiate(source, importObject);
					};
				}
  			const go = new Go();
  			WebAssembly.instantiateStreaming(fetch(%q), go.importObject).then((result) => {
  				go.run(result.instance);
  			});
  		</script>
    </head>
    <body>
      <div id="main"></div>
    </body>
  </html>
  `, MinimalIndexPageGoWASMExecPath, MinimalIndexPageExecutableWASMPath))
}

// GoWASMExec returns the contents of $(go env GOROOT)/misc/wasm/wasm_exec.js
func GoWASMExec() []byte {
	decoded, _ := base64.StdEncoding.DecodeString(`
`)

	return decoded
}

// The name "goes" was triggered by the words "Go" and "EcmaScript"... duh.
